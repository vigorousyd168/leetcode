class Solution(object):
    def largestDivisibleSubset(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        # classic DP
        l = len(nums)
        nums = sorted(nums)
        count = [1] * l
        pre = [-1] * l
        maxLen, idx = 0, -1
        for i in xrange(l):
            for j in xrange(i-1, -1, -1):
                if nums[i] % nums[j] == 0 and count[j] + 1 > count[i]:
                        count[i], pre[i] = count[j] + 1, j
            if count[i] > maxLen:
                maxLen, idx = count[i], i
        res = [] # also handles nums == [] case
        while idx != -1:
            res.append(nums[idx])
            idx = pre[idx]
        return res

        
    def largestDivisibleSubsetMy(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        if len(nums) == 0:
            return []
        nums = sorted(nums)
        maxLen = 1
        sets = [[nums[0]]]
        newSets = []
        for n in nums[1:]:
            add = False
            newSets = []
            for s in sets:
                if n % s[-1] == 0:
                    newSets.append(s+[n])
                    maxLen = max(maxLen, len(s)+1)
                    add = True
            if not add:
                sets.append([n])
            else:
                sets += newSets
        for s in sets:
            if len(s) == maxLen:
                return s
def main():
    sol = Solution()
    print sol.largestDivisibleSubset([1,2,3]) # [1,2]
    print sol.largestDivisibleSubset([]) # []
    print sol.largestDivisibleSubset([1]) # [1]
    print sol.largestDivisibleSubset([1,2,4,3,9,27]) # [1,3,9,27]
    print sol.largestDivisibleSubset([428,492,420,459,540,17,315,739,389,100,394,912,640,797,243,52,919,590,379,877,601,327,1000,857,323,316,215,269,960,712,743,203,514,550,742,531,864,480,225,830,307,22,424,358,292,14,88,520,614,414,519,470,736,187,37,4,498,748,98,236,950,612,785,43,142,649,874,412,963,593,471,978,114,30,417,633,995,152,464,917,690,852,272,599,370,774,900,981,559,942,474,815,885,873,265,477,494,735,845,201,240,833,868,69,336,684,986,25,535,609,563,486,337,385,310,247,679,135,805,493,371,677,109,200,522,196,44,345,396,270,584,228,137,652,916,172,989,940,59,598,855,896,927,191,280,589,437,723,155,94,263,293,143,458,487,853,957,70,433,73,348,617,62,639,27,11,922,289,683,554,863,600,63,693,632,826,89,24,312,294,733,726,426,218,421,556,342,869,745,61,110,344,475,478,388,510,76,335,998,843,432,730,568,992,250,752,54,332,716,551,962,296,611,423,253,947,713,807,262,258,631,104,689,23,897,246,350,68,33,28,587,578,548,879,870,329,575,275,407,907,901,664,889,356,352,198,744,97,899,163,968,931,120,102,393,12,776,340,702,862,620,872,283,761,948,326,937,910,34,809,232,1,91,555,605,245,8,349,256,595,836,176,560,175,795,784,767,430,544,714,608,391,704,517,737,42,768,167,643,724,2,72,667,136,208,173,355,308,616,681,810,71,881,341,923,782,122,441,778,268,301,132,588,860,656,214,964,997,166,732,328,154,503,6,360,977,834,749,529,298,794,169,924,220,303,456,772,773,841,967,133,149,943,966,249,46,644,670,720,622,804,402,230,972,505,543,946,415,538,838,504,970,798,287,440,769,277,840,82,45,168,508,113,178,3,15,847,146,974,78,958,461,586,300,58,295,721,260,473,353,619,882,112,672,460,583,509,908,944,454,404,803,56,961,861,800,80,875,386,728,956,634,399,216,476,666,422,271,182,490,982,570,226,472,871,199,377,597,865,699,530,951,789,779,244,698,87,438,212,367,49,190,436,920,164,775,306,170,448,700,390,237,179,16,650,507,955,665,144,452,883,953,273,150,760,443,339,603,979,419,7,467,457,692,799,261,859,20,653,19,606,99,741,976,26,821,572,211,512,816,320,770,722,491,751,177,496,521,32,450,591,334,411,77,442,366,813,980,9,707,317,38,502,566,188,571,162,381,281,526,338,227,416,318,235,376,506,387,781,806,585,106,525,429,729,626,878,284,884,134,914,886,184,189,932,65,111,793,462,801,949,906,10,638,400,771,409,398,685,635,755,204,444,395,314,985,466,285,717,354,125,660,465,647,915,107,851,532,954,446,81,546,66,934,780,569,959,484,965,158,911,233,254,51,185,758,709,537,221,363,322,682,691,848,276,453,850,39,319,641,527,828,248,206])

if __name__ == '__main__':
    main()